
// Write a C Program to Scan and Count the number of characters, words, and lines in a file.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    FILE *file;
    char path[100];

    char ch;
    int characters, words, lines;
    printf("Enter source file path: ");
    scanf("%s", path);

    file = fopen(path, "r");

    if (file == NULL)
    {
        printf("\nUnable to open file.\n");
        printf("Please check if file exists and you have read privilege.\n");

        exit(EXIT_FAILURE);
    }

    characters = words = lines = 0;
    while ((ch = fgetc(file)) != EOF)
    {
        characters++;

        if (ch == '\n' || ch == '\0')
            lines++;

        if (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\0')
            words++;
    }

    /*  if (characters > 0)
      {
          words++;
          lines++;
      } */

    printf("\n");
    printf("Total characters = %d\n", characters);
    printf("Total words      = %d\n", words);
    printf("Total lines      = %d\n", lines);

    fclose(file);

    return 0;
}


// Write a C program to read names and marks of n number of students from users and store them in a file.

#include <stdio.h>
#include <stdlib.h>
int main() {
	char name[50];
	int marks,i,n;
	printf("Enter number of students: ");
	scanf("%d",&n);
	FILE *fptr;
	fptr=(fopen("./student.txt","w"));
	if(fptr==NULL) {
		printf("Error!");
		exit(1);
	}
	for (i=0;i<n;++i) {
		printf("For student%d\nEnter name: ",i+1);
		scanf("%s",name);
		printf("Enter marks: ");
		scanf("%d",&marks);
		fprintf(fptr,"\nName: %s \nMarks=%d \n",name,marks);
	}
	fclose(fptr);
	return 0;
}

//Write a C Program Delete a specific Line from a Text File.

#include<stdio.h>
int main(){
    FILE *fptr1, *fptr2;
    char file1[] ="file1.txt";
    char file2[] ="file2.txt";
    char curr;
    int del, line_number = 0;
    printf("Enter line to be deleted : ");
    scanf("%d", &del);
    fptr1 = fopen(file1,"r");
    fptr2 = fopen(file2, "w");
    curr = getc(fptr1);
    if(curr!=EOF) {line_number =1;}
    while(1){
      if(del != line_number)
        putc(curr, fptr2);
        curr = getc(fptr1);
        if(curr =='\n') line_number++;
        if(curr == EOF) break;
    }
    fclose(fptr1);
    fclose(fptr2);
}

// Write a C Program copy content from one file to another

#include<stdio.h>
int main(){
    FILE *fptr1, *fptr2;
    char file1[] ="file1.txt";
    char file2[] ="file2.txt";
    char curr;

    fptr1 = fopen(file1,"r");
    fptr2 = fopen(file2, "w");
    curr = getc(fptr1);


    while(curr!=EOF) {
        putc(curr, fptr2);
        curr = getc(fptr1);
    }

    fclose(fptr1);
    fclose(fptr2);
}

// Write a C program to delete/ drop specific words from one file (say source.txt).

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define BUFFER_SIZE 1000


void removeAll(char * str, const char * toRemove);


int main()
{
    FILE * fPtr;
    FILE * fTemp;
    char path[100];
    
    char toRemove[100];
    char buffer[1000];



    printf("Enter path of source file: ");
    scanf("%s", path);

    printf("Enter word to remove: ");
    scanf("%s", toRemove);


    fPtr  = fopen(path, "r");
    fTemp = fopen("delete.tmp", "w"); 

    if (fPtr == NULL || fTemp == NULL)
    {
        printf("\nUnable to open file.\n");
        exit(EXIT_SUCCESS);
    }


     
    while ((fgets(buffer, BUFFER_SIZE, fPtr)) != NULL)
    {
        removeAll(buffer, toRemove);

        fputs(buffer, fTemp);
    }


    fclose(fPtr);
    fclose(fTemp);


    remove(path);

    rename("delete.tmp", path);


    printf("\nAll occurrence of '%s' removed successfully.", toRemove);

    return 0;
}



void removeAll(char * str, const char * toRemove)
{
    int i, j, stringLen, toRemoveLen;
    int found;

    stringLen   = strlen(str);      
    toRemoveLen = strlen(toRemove); 


    for(i=0; i <= stringLen - toRemoveLen; i++)
    {
        found = 1;
        for(j=0; j < toRemoveLen; j++)
        {
            if(str[i + j] != toRemove[j])
            {
                found = 0;
                break;
            }
        }

        if(str[i + j] != ' ' && str[i + j] != '\t' && str[i + j] != '\n' && str[i + j] != '\0') 
        {
            found = 0;
        }

        if(found == 1)
        {
            for(j=i; j <= stringLen - toRemoveLen; j++)
            {
                str[j] = str[j + toRemoveLen];
            }

            stringLen = stringLen - toRemoveLen;

            i--;
        }
    }
}


// Write a C program to detect tokens in a C program.

#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
bool isValidDelimiter(char ch)
{
   if (ch == ' ' || ch == '+' || ch == '-' || ch == '*' ||
       ch == '/' || ch == ',' || ch == ';' || ch == '>' ||
       ch == '<' || ch == '=' || ch == '(' || ch == ')' ||
       ch == '[' || ch == ']' || ch == '{' || ch == '}')
      return (true);
   return (false);
}
bool isValidOperator(char ch)
{
   if (ch == '+' || ch == '-' || ch == '*' ||
       ch == '/' || ch == '>' || ch == '<' ||
       ch == '=')
      return (true);
   return (false);
}

bool isvalidIdentifier(char *str)
{
   if (str[0] == '0' || str[0] == '1' || str[0] == '2' ||
       str[0] == '3' || str[0] == '4' || str[0] == '5' ||
       str[0] == '6' || str[0] == '7' || str[0] == '8' ||
       str[0] == '9' || isValidDelimiter(str[0]) == true)
      return (false);
   return (true);
}
bool isValidKeyword(char *str)
{
   if (!strcmp(str, "if") || !strcmp(str, "else") || !strcmp(str, "while") || 
   !strcmp(str, "do") || !strcmp(str, "break") || !strcmp(str, "continue") || 
   !strcmp(str, "int") || !strcmp(str, "double") || !strcmp(str, "float") || 
   !strcmp(str, "return") || !strcmp(str, "char") || !strcmp(str, "case") || 
   !strcmp(str, "char") || !strcmp(str, "sizeof") || !strcmp(str, "long") || 
   !strcmp(str, "short") || !strcmp(str, "typedef") || !strcmp(str, "switch") || 
   !strcmp(str, "unsigned") || !strcmp(str, "void") || !strcmp(str, "static") ||
   !strcmp(str, "struct") || !strcmp(str, "goto"))
      return (true);
   return (false);
}
bool isValidInteger(char *str)
{
   int i, len = strlen(str);
   if (len == 0)
      return (false);
   for (i = 0; i < len; i++)
   {
      if (str[i] != '0' && str[i] != '1' && str[i] != '2' && str[i] != '3' && str[i] != '4' && str[i] != '5' && str[i] != '6' && str[i] != '7' && str[i] != '8' && str[i] != '9' || (str[i] == '-' && i > 0))
         return (false);
   }
   return (true);
}
bool isRealNumber(char *str)
{
   int i, len = strlen(str);
   bool hasDecimal = false;
   if (len == 0)
      return (false);
   for (i = 0; i < len; i++)
   {
      if (str[i] != '0' && str[i] != '1' && str[i] != '2' && str[i] != '3' && str[i] != '4' && str[i] != '5' && str[i] != '6' && str[i] != '7' && str[i] != '8' && str[i] != '9' && str[i] != '.' || (str[i] == '-' && i > 0))
         return (false);
      if (str[i] == '.')
         hasDecimal = true;
   }
   return (hasDecimal);
}
char *subString(char *str, int left, int right)
{
   int i;
   char *subStr = (char *)malloc(sizeof(char) * (right - left + 2));
   for (i = left; i <= right; i++)
      subStr[i - left] = str[i];
   subStr[right - left + 1] = '\0';
   return (subStr);
}
void detectTokens(char *str)
{
   int left = 0, right = 0;
   int length = strlen(str);
   while (right <= length && left <= right)
   {
      if (isValidDelimiter(str[right]) == false)
         right++;
      if (isValidDelimiter(str[right]) == true && left == right)
      {
         if (isValidOperator(str[right]) == true)
         printf("Valid operator : '%c'\n", str[right]);
         right++;
         left = right;
      }
      else if (isValidDelimiter(str[right]) == true && left != right || (right == length && left != right))
      {
         char *subStr = subString(str, left, right - 1);
         if (isValidKeyword(subStr) == true)
            printf("Valid keyword : '%s'\n", subStr);
         else if (isValidInteger(subStr) == true)
            printf("Valid Integer : '%s'\n", subStr);
         else if (isRealNumber(subStr) == true)
            printf("Real Number : '%s'\n", subStr);
         else if (isvalidIdentifier(subStr) == true
            && isValidDelimiter(str[right - 1]) == false)
         printf("Valid Identifier : '%s'\n", subStr);
         else if (isvalidIdentifier(subStr) == false
            && isValidDelimiter(str[right - 1]) == false)
         printf("Invalid Identifier : '%s'\n", subStr);
         left = right;
      }
   }
   return;
}
int main()
{
   char str[100] = "float x = a + 1b; ";
   printf("The Program is : '%s' \n", str);
   printf("All Tokens are : \n");
   detectTokens(str);
   return (0);
}


// Write a C program to recognize strings under 'a*', 'a*b+', 'abb'

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void main() {
    char s[20], c;
    int state = 0, i = 0;
    printf("Enter a string: ");
    gets(s);
    while (s[i] != '\0') {
        switch (state) {
        case 0:
            c = s[i++];
            if (c == 'a')
                state = 1;
            else if (c == 'b')
                state = 2;
            else
                state = 6;
            break;
        case 1:
            c = s[i++];
            if (c == 'a')
                state = 3;
            else if (c == 'b')
                state = 4;
            else
                state = 6;
            break;
        case 2:
            c = s[i++];
            if (c == 'a')
                state = 6;
            else if (c == 'b')
                state = 2;
            else
                state = 6;
            break;
        case 3:
            c = s[i++];
            if (c == 'a')
                state = 3;
            else if (c == 'b')
                state = 2;
            else
                state = 6;
            break;
        case 4:
            c = s[i++];
            if (c == 'a')
                state = 6;
            else if (c == 'b')
                state = 5;
            else
                state = 6;
            break;
        case 5:
            c = s[i++];
            if (c == 'a')
                state = 6;
            else if (c == 'b')
                state = 2;
            else
                state = 6;
            break;
        case 6:
            printf("%s is not recognised", s); 
            exit(0);
        }
    }
    if (state == 1 || state == 0 || state == 3)
        printf("%s is accepted under rule 'a*'", s);
    else if ((state == 2) || (state == 4))
        printf("%s is accepted under rule 'a*b+'", s);
    else if (state == 5)
        printf("%s is accepted under rule 'abb'", s);
    else 
        printf("%s is not recognised", s);

} 


// Write a C program for constructing of LALR Bottom-up parsing.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void push(char *, int *, char);

char stacktop(char *);

void isproduct(char, char);

int ister(char);

int isnter(char);

int isstate(char);

void error();

void isreduce(char, char);

char pop(char *, int *);

void printt(char *, int *, char[], int);
 
void rep(char[], int);

struct action
{
    char row[6][5];
};

const struct action A[12] = {

    {"sf", "emp", "emp", "se", "emp", "emp"},

    {"emp", "sg", "emp", "emp", "emp", "acc"},

    {"emp", "rc", "sh", "emp", "rc", "rc"},

    {"emp", "re", "re", "emp", "re", "re"},

    {"sf", "emp", "emp", "se", "emp", "emp"},

    {"emp", "rg", "rg", "emp", "rg", "rg"},

    {"sf", "emp", "emp", "se", "emp", "emp"},

    {"sf", "emp", "emp", "se", "emp", "emp"},

    {"emp", "sg", "emp", "emp", "sl", "emp"},

    {"emp", "rb", "sh", "emp", "rb", "rb"},

    {"emp", "rb", "rd", "emp", "rd", "rd"},

    {"emp", "rf", "rf", "emp", "rf", "rf"}

};

struct gotol

{

    char r[3][4];
};

const struct gotol G[12] = {

    {"b", "c", "d"},

    {"emp", "emp", "emp"},

    {"emp", "emp", "emp"},

    {"emp", "emp", "emp"},

    {"i", "c", "d"},

    {"emp", "emp", "emp"},

    {"emp", "j", "d"},

    {"emp", "emp", "k"},

    {"emp", "emp", "emp"},

    {"emp", "emp", "emp"},

};

char ter[6] = {'i', '+', '*', ')', '(', '$'};

char nter[3] = {'E', 'T', 'F'};

char states[12] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'm', 'j', 'k', 'l'};

char stack[100];

int top = -1;

char temp[10];

struct grammar

{
    char left;

    char right[5];
};

const struct grammar rl[6] = {

    {'E', "e+T"},

    {'E', "T"},

    {'T', "T*F"},

    {'T', "F"},

    {'F', "(E)"},

    {'F', "i"},

};

void main()

{

    char inp[80], x, p, dl[80], y, bl = 'a';

    int i = 0, j, k, l, n, m, c, len;

    printf(" Enter the input :");

    scanf("%s", inp);

    len = strlen(inp);

    inp[len] = '$';

    inp[len + 1] = '\0';

    push(stack, &top, bl);

    printf("\n stack \t\t\t input");

    printt(stack, &top, inp, i);

    do

    {

        x = inp[i];

        p = stacktop(stack);

        isproduct(x, p);

        if (strcmp(temp, "emp") == 0)

            error();

        if (strcmp(temp, "acc") == 0)

            break;

        else

        {

            if (temp[0] == 's')

            {

                push(stack, &top, inp[i]);

                push(stack, &top, temp[1]);

                i++;
            }

            else

            {

                if (temp[0] == 'r')

                {

                    j = isstate(temp[1]);

                    strcpy(temp, rl[j - 2].right);

                    dl[0] = rl[j - 2].left;

                    dl[1] = '\0';

                    n = strlen(temp);

                    for (k = 0; k < 2 * n; k++)

                        pop(stack, &top);

                    for (m = 0; dl[m] != '\0'; m++)

                        push(stack, &top, dl[m]);

                    l = top;

                    y = stack[l - 1];

                    isreduce(y, dl[0]);

                    for (m = 0; temp[m] != '\0'; m++)

                        push(stack, &top, temp[m]);
                }
            }
        }

        printt(stack, &top, inp, i);

    } while (inp[i] != '\0');

    if (strcmp(temp, "acc") == 0)

        printf(" \n accept the input ");

    else

        printf(" \n do not accept the input ");
}
void push(char *s, int *sp, char item)

{

    if (*sp == 100)

        printf(" stack is full ");

    else

    {

        *sp = *sp + 1;
        s[*sp] = item;
    }
}

char stacktop(char *s)

{

    char i;

    i = s[top];

    return i;
}

void isproduct(char x, char p)

{

    int k, l;

    k = ister(x);

    l = isstate(p);

    strcpy(temp, A[l - 1].row[k - 1]);
}

int ister(char x)

{

    int i;

    for (i = 0; i < 6; i++)

        if (x == ter[i])

            return i + 1;

    return 0;
}
int isnter(char x)

{

    int i;

    for (i = 0; i < 3; i++)

        if (x == nter[i])

            return i + 1;

    return 0;
}

int isstate(char p)

{

    int i;

    for (i = 0; i < 12; i++)

        if (p == states[i])
            return i + 1;

    return 0;
}

void error()

{

    printf(" error in the input ");

    exit(0);
}

void isreduce(char x, char p)

{

    int k, l;

    k = isstate(x);

    l = isnter(p);

    strcpy(temp, G[k - 1].r[l - 1]);
}
char pop(char *s, int *sp)

{

    char item;

    if (*sp == -1)

        printf(" stack is empty ");

    else

    {

        item = s[*sp];

        *sp = *sp - 1;
    }

    return item;
}

void printt(char *t, int *p, char inp[], int i)

{

    int r;

    printf("\n");

    for (r = 0; r <= *p; r++)

        rep(t, r);

    printf("\t\t\t");

    for (r = i; inp[r] != '\0'; r++)
        printf("%c", inp[r]);
}
void rep(char t[], int r)

{

    char c;

    c = t[r];

    switch (c)

    {

    case 'a':
        printf("0");

        break;

    case 'b':
        printf("1");

        break;

    case 'c':
        printf("2");

        break;

    case 'd':
        printf("3");

        break;

    case 'e':
        printf("4");

        break;

    case 'f':
        printf("5");

        break;

    case 'g':
        printf("6");

        break;

    case 'h':
        printf("7");

        break;

    case 'm':
        printf("8");

        break;

    case 'j':
        printf("9");

        break;

    case 'k':
        printf("10");

        break;

    case 'l':
        printf("11");

        break;

    default:
        printf("%c", t[r]);

        break;
    }
}

// Write a C program to implement shift reduce parser.


#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#define MAX_STACK_SIZE 100

typedef struct {
    char left[10];
    char right[10];
}
rule;

rule rules[10];

int n_rules;

char stack[MAX_STACK_SIZE];
int top = -1;

void push(char c) {
    if (top >= MAX_STACK_SIZE - 1) {
        printf("Stack overflow\n");
        exit(1);
    }
    stack[++top] = c;
}

char pop() {
    if (top == -1) {
        printf("Stack underflow\n");
        exit(1);
    }
    return stack[top--];
}

void display() {
    int i;
    for (i = 0; i <= top; i++) {
        printf("%c ", stack[i]);
    }
    printf("\n");
}

char action[10][10], go_to[10][10];

char input[100];
int input_len;

typedef enum {
    ID,
    PLUS,
    STAR,
    LPAREN,
    RPAREN,
    DOLLAR,
    ERROR
}
token_type;

typedef struct {
    token_type type;
    char lexeme[10];
}
token;

token lookahead;

token get_token() {
    token t;
    char c = input[0];
    if (c == 'a' || c == 'b') {
        t.type = ID;
        t.lexeme[0] = c;
        t.lexeme[1] = '\0';
        input++;
    } else if (c == '+') {
        t.type = PLUS;
        t.lexeme[0] = c;
        t.lexeme[1] = '\0';
        input++;
    } else if (c == '*') {
        t.type = STAR;
        t.lexeme[0] = c;
        t.lexeme[1] = '\0';
        input++;
    } else if (c == '(') {
        t.type = LPAREN;
        t.lexeme[0] = c;
        t.lexeme[1] = '\0';
        input++;
    } else if (c == ')') {
        t.type = RPAREN;
        t.lexeme[0] = c;
        t.lexeme[1] = '\0';
        input++;
    } else if (c == '$') {
        t.type = DOLLAR;
        t.lexeme[0] = c;
        t.lexeme[1] = '\0';
    } else {
        t.type = ERROR;
        t.lexeme[0] = c;
        t.lexeme[1] = '\0';
        input++;
    }
    return t;
}

void parse() {
    int i, j;
    push('0');
    display();
    lookahead = get_token();
    while (1) {
        char s = stack[top];
        int r = s - '0';
        int c;
        if (lookahead.type == ID) {
            c = 0;
        } else if (lookahead.type == PLUS) {
            c = 1;
        } else if (lookahead.type == STAR) {
            c = 2;
        } else if (lookahead.type == LPAREN) {
            c = 3;
        } else if (lookahead.type == RPAREN) {
            c = 4;
        } else if (lookahead.type == DOLLAR) {
            c = 5;
        } else {
            printf("Error: invalid input token\n");
            exit(1);
        }
        char action_code = action[r][c];
        if (action_code == 's') {
            push(lookahead.lexeme[0]);
            push(action[r][c + 6]);
            display();
            lookahead = get_token();
        } else if (action_code == 'r') {
            int rule_num = action[r][c + 6] - '0';
            int num_pop = strlen(rules[rule_num].right);
            for (i = 0; i < num_pop; i++) {
                pop();
                pop();
            }
            char non_terminal = rules[rule_num].left[0];
            int s = stack[top] - '0';
            int next_state = go_to[s][non_terminal - 'A'];
            push(non_terminal);
            push(next_state + '0');
            display();
        } else if (action_code == 'a') {
            printf("Accepted\n");
            return;
        } else {
            printf("Error: invalid action code\n");
            exit(1);
        }
    }
}

int main() {
    int i, j;
    // Define the grammar
    printf("Enter the number of rules: ");
    scanf("%d", & n_rules);
    printf("Enter the grammar rules (e.g., S->aS|b): \n");
    for (i = 0; i < n_rules; i++) {
        scanf("%s", rules[i].left);
        scanf("%s", rules[i].right);
    }
    // Print the grammar
    printf("\nGrammar:\n");
    for (i = 0; i < n_rules; i++) {
        printf("%s -> %s\n", rules[i].left, rules[i].right);
    }
    // Define the parsing table
    printf("\nEnter the parsing table (e.g., 1 0s2 0s3 0 0 0a0): \n");
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            action[i][j] = '0';
            go_to[i][j] = '0';
        }
    }
    for (i = 0; i < 10; i++) {
        scanf("%s", action[i]);
        for (j = 0; j < 6; j++) {
            if (action[i][j] == '\0') {
                break;
            }
            if (action[i][j] == 's' || action[i][j] == 'r') {
                action[i][j + 1] = '\0';
            }
        }
        scanf("%s", go_to[i]);
    }
    // Print the parsing table
    printf("\nParsing table:\n");
    printf(" | a + * ( ) $\n");
    printf("--+----------------------\n");
    for (i = 0; i < 10; i++) {
        printf("%d | ", i);
        for (j = 0; j < 6; j++) {
            printf("%c", action[i][j]);
        }
        printf(" ");
        for (j = 0; j < 6; j++) {
            printf("%c", go_to[i][j]);
        }
        printf("\n");
    }
    // Parse the input string
    printf("\nEnter the input string: ");
    scanf("%s", input);
    input_len = strlen(input);
    strcat(input, "$");
    lookahead = get_token();
    printf("\nStack trace:\n");
    display();
    parse();
    return 0;
}

// Write a C program to implement operator precedence parsing 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_STACK 100
#define MAX_EXPR 100

char stack[MAX_STACK];
int top = -1;

char input[MAX_EXPR];
int input_len = 0;
int current_pos = 0;

char operator_table[7][7] = {
    {'>', '>', '<', '<', '<', '>', '>'},
    {'>', '>', '<', '<', '<', '>', '>'},
    {'>', '>', '>', '>', '<', '>', '>'},
    {'>', '>', '>', '>', '<', '>', '>'},
    {'<', '<', '<', '<', '<', '=', '0'},
    {'>', '>', '>', '>', '0', '>', '>'},
    {'<', '<', '<', '<', '<', '0', '='}
};

typedef struct {
    int type; 
    char value;
} Token;

Token get_token() {
    Token t;
    if (current_pos == input_len) {
        t.type = 0;
        t.value = '$';
        return t;
    }
    char c = input[current_pos++];
    if (isdigit(c)) {
        t.type = 1;
        t.value = c;
    } else {
        t.type = 0;
        t.value = c;
    }
    return t;
}

void push(char c) {
    if (top == MAX_STACK - 1) {
        printf("Error: stack overflow\n");
        exit(1);
    }
    stack[++top] = c;
}

char pop() {
    if (top == -1) {
        printf("Error: stack underflow\n");
        exit(1);
    }
    return stack[top--];
}

void display() {
    int i;
    for (i = 0; i <= top; i++) {
        printf("%c", stack[i]);
    }
    printf("    ");
    for (i = current_pos; i < input_len; i++) {
        printf("%c", input[i]);
    }
    printf("\n");
}

void parse() {
    Token t = get_token();
    push('$');
    display();
    while (top >= 0) {
        char c = stack[top];
        if (isdigit(c)) {
            t = get_token();
            if (t.type == 0) {
                printf("Error: invalid input token\n");
                exit(1);
            }
            push(t.value);
            display();
        } else {
            int r = strchr("+-*/()$", c) - strchr("+-*/()$", '$');
            int c = strchr("+-*/()$", t.value) - strchr("+-*/()$", '$');
            char op = operator_table[r][c];
            if (op == '>') {
                char b = pop();
                char a = pop();
                char p = pop();
                if (p != '(') {
                    printf("Error: invalid input\n");
                    exit(1);
                }
                push(a);
                push(b);
                display();
            } else if (op == '<' || op == '=') {
                push(t.value);
                display();
                t = get_token();
            } else {
                printf("Error: invalid operator precedence\n");
                exit(1);
            }
        }
    }
}

int main() {
    printf("Enter the input expression: ");
    scanf("%s", input);
    input_len = strlen(input);
    strcat(input, "$");
    parse();
    return 0;
}

// Write a C program for constructing of recursive descent parsing

#include<stdio.h>
#include <stdlib.h>
char l;

void match(char c)
   {
         if(l==c)
              l=getchar();
         else 
            {   
              printf("Invalid Input\n"); 
              exit(0);
            }
   }

void B()
  {
     if(l=='b')
        {
           match('b'); 
        }
     else 
        {   
           printf("Invalid Input\n"); 
           exit(0);
        }
  }

void A()
 {
    if(l=='a')
      {
        match('a');
        B();
      }
    else
        return;
  }

void S()
  {
    A();
    A();
  }

void main()
{    
    char input[10];
    printf("Enter String with $ at the end\n");
    l=getchar();
    S();
    if(l=='$')
           {
                 printf("\nParsing Successful\n");
           }
    else  
        {
           printf("Invalid Input\n");
        }
    
}

// Write a C program for constructing of LL (1) parsing.

#include<stdio.h>
#include<string.h>
#define TSIZE 128

int table[100][TSIZE];

char terminal[TSIZE];

char nonterminal[26];

struct product {
    char str[100];
    int len;
}pro[20];

int no_pro;
char first[26][TSIZE];
char follow[26][TSIZE];

char first_rhs[100][TSIZE];

int isNT(char c) {
    return c >= 'A' && c <= 'Z';
}

void readFromFile() {
    FILE* fptr;
    fptr = fopen("text.txt", "r");
    char buffer[255];
    int i;
    int j;
    while (fgets(buffer, sizeof(buffer), fptr)) {
        printf("%s", buffer);
        j = 0;
        nonterminal[buffer[0] - 'A'] = 1;
        for (i = 0; i < strlen(buffer) - 1; ++i) {
            if (buffer[i] == '|') {
                ++no_pro;
                pro[no_pro - 1].str[j] = '\0';
                pro[no_pro - 1].len = j;
                pro[no_pro].str[0] = pro[no_pro - 1].str[0];
                pro[no_pro].str[1] = pro[no_pro - 1].str[1];
                pro[no_pro].str[2] = pro[no_pro - 1].str[2];
                j = 3;
            }
            else {
                pro[no_pro].str[j] = buffer[i];
                ++j;
                if (!isNT(buffer[i]) && buffer[i] != '-' && buffer[i] != '>') {
                    terminal[buffer[i]] = 1;
                }
            }
        }
        pro[no_pro].len = j;
        ++no_pro;
    }
}
void add_FIRST_A_to_FOLLOW_B(char A, char B) {
    int i;
    for (i = 0; i < TSIZE; ++i) {
        if (i != '^')
            follow[B - 'A'][i] = follow[B - 'A'][i] || first[A - 'A'][i];
    }
}
void add_FOLLOW_A_to_FOLLOW_B(char A, char B) {
    int i;
    for (i = 0; i < TSIZE; ++i) {
        if (i != '^')
            follow[B - 'A'][i] = follow[B - 'A'][i] || follow[A - 'A'][i];
    }
}
void FOLLOW() {
    int t = 0;
    int i, j, k, x;
    while (t++ < no_pro) {
        for (k = 0; k < 26; ++k) {
            if (!nonterminal[k])    continue;
            char nt = k + 'A';
            for (i = 0; i < no_pro; ++i) {
                for (j = 3; j < pro[i].len; ++j) {
                    if (nt == pro[i].str[j]) {
                        for (x = j + 1; x < pro[i].len; ++x) {
                            char sc = pro[i].str[x];
                            if (isNT(sc)) {
                                add_FIRST_A_to_FOLLOW_B(sc, nt);
                                if (first[sc - 'A']['^'])
                                    continue;
                            }
                            else {
                                follow[nt - 'A'][sc] = 1;
                            }
                            break;
                        }
                        if (x == pro[i].len)
                            add_FOLLOW_A_to_FOLLOW_B(pro[i].str[0], nt);
                    }
                }
            }
        }
    }
}
void add_FIRST_A_to_FIRST_B(char A, char B) {
    int i;
    for (i = 0; i < TSIZE; ++i) {
        if (i != '^') {
            first[B - 'A'][i] = first[A - 'A'][i] || first[B - 'A'][i];
        }
    }
}
void FIRST() {
    int i, j;
    int t = 0;
    while (t < no_pro) {
        for (i = 0; i < no_pro; ++i) {
            for (j = 3; j < pro[i].len; ++j) {
                char sc = pro[i].str[j];
                if (isNT(sc)) {
                    add_FIRST_A_to_FIRST_B(sc, pro[i].str[0]);
                    if (first[sc - 'A']['^'])
                        continue;
                }
                else {
                    first[pro[i].str[0] - 'A'][sc] = 1;
                }
                break;
            }
            if (j == pro[i].len)
                first[pro[i].str[0] - 'A']['^'] = 1;
        }
        ++t;
    }
}
void add_FIRST_A_to_FIRST_RHS__B(char A, int B) {
    int i;
    for (i = 0; i < TSIZE; ++i) {
        if (i != '^')
            first_rhs[B][i] = first[A - 'A'][i] || first_rhs[B][i];
    }
}

void FIRST_RHS() {
    int i, j;
    int t = 0;
    while (t < no_pro) {
        for (i = 0; i < no_pro; ++i) {
            for (j = 3; j < pro[i].len; ++j) {
                char sc = pro[i].str[j];
                if (isNT(sc)) {
                    add_FIRST_A_to_FIRST_RHS__B(sc, i);
                    if (first[sc - 'A']['^'])
                        continue;
                }
                else {
                    first_rhs[i][sc] = 1;
                }
                break;
            }
            if (j == pro[i].len)
                first_rhs[i]['^'] = 1;
        }
        ++t;
    }
}
int main() {
    readFromFile();
    follow[pro[0].str[0] - 'A']['$'] = 1;
    FIRST();
    FOLLOW();
    FIRST_RHS();
    int i, j, k;

    printf("\n");
    for (i = 0; i < no_pro; ++i) {
        if (i == 0 || (pro[i - 1].str[0] != pro[i].str[0])) {
            char c = pro[i].str[0];
            printf("FIRST OF %c: ", c);
            for (j = 0; j < TSIZE; ++j) {
                if (first[c - 'A'][j]) {
                    printf("%c ", j);
                }
            }
            printf("\n");
        }
    }
    
    printf("\n");
    for (i = 0; i < no_pro; ++i) {
        if (i == 0 || (pro[i - 1].str[0] != pro[i].str[0])) {
            char c = pro[i].str[0];
            printf("FOLLOW OF %c: ", c);
            for (j = 0; j < TSIZE; ++j) {
                if (follow[c - 'A'][j]) {
                    printf("%c ", j);
                }
            }
            printf("\n");
        }
    }

    printf("\n");
    for (i = 0; i < no_pro; ++i) {
        printf("FIRST OF %s: ", pro[i].str);
        for (j = 0; j < TSIZE; ++j) {
            if (first_rhs[i][j]) {
                printf("%c ", j);
            }
        }
        printf("\n");
    }

    terminal['$'] = 1;

    terminal['^'] = 0;

    printf("\n");
    printf("\n\t**************** LL(1) PARSING TABLE *******************\n");
    printf("\t--------------------------------------------------------\n");
    printf("%-10s", "");
    for (i = 0; i < TSIZE; ++i) {
        if (terminal[i])    printf("%-10c", i);
    }
    printf("\n");
    int p = 0;
    for (i = 0; i < no_pro; ++i) {
        if (i != 0 && (pro[i].str[0] != pro[i - 1].str[0]))
            p = p + 1;
        for (j = 0; j < TSIZE; ++j) {
            if (first_rhs[i][j] && j != '^') {
                table[p][j] = i + 1;
            }
            else if (first_rhs[i]['^']) {
                for (k = 0; k < TSIZE; ++k) {
                    if (follow[pro[i].str[0] - 'A'][k]) {
                        table[p][k] = i + 1;
                    }
                }
            }
        }
    }
    k = 0;
    for (i = 0; i < no_pro; ++i) {
        if (i == 0 || (pro[i - 1].str[0] != pro[i].str[0])) {
            printf("%-10c", pro[i].str[0]);
            for (j = 0; j < TSIZE; ++j) {
                if (table[k][j]) {
                    printf("%-10s", pro[table[k][j] - 1].str);
                }
                else if (terminal[j]) {
                    printf("%-10s", "");
                }
            }
            ++k;
            printf("\n");
        }
    }
}

// Write a program to take C program as input and identify all types comment line inside the program.  After identifying all types of comment line it’s needs to be written back to a separate file.

#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

void fun(FILE *fp) {
    FILE *fp1, *fp2;

    fp1 = fopen("type1.txt", "w");
    if(!fp1) {
        printf("\nCould not open type1 file");
        exit(1);
    }
    else
        printf("\nOpening type1 file\n");

    fp2 = fopen("type2.txt", "w");
    if(!fp2) {
        printf("\nCould not open type2 file");
        exit(1);
    }
    else
        printf("\nOpening type2 file\n");

    char ch;

    int f=0;
    while((ch = fgetc(fp)) != EOF) {
        printf("%c\n", ch);
        if(f==0) {
            if(ch == '/') 
                f=1;
        }
        else if(f==1) {
            if(ch == '/') 
                f = 2;
            else if(ch == '*') 
                f = 3;
        }
        else if(f==2) {
            fputc(ch, fp1);
            if(ch == '\n')
                f = 0;
        }
        else if(f==3) {
            if(ch == '*') 
                f = 4;
            else
                fputc(ch, fp2);
        }
        else if(f==4) {
            if(ch == '/') {
                f = 0;
                fputc('\n', fp2);
            }
            else {
                fputc('*', fp2);
                fputc(ch, fp2);
                f = 3;
            }
        }
    } 

    fclose(fp1);
    fclose(fp2);
}

int main() {
    FILE *fp;
    char fname[50];

    printf("\nEnter the source file path: ");
    scanf("%s", fname);

    fp = fopen(fname,"r");
    if(!fp) {
        printf("\nCould not open read file");
        return 1;
    }
    else
        printf("\nOpening read file\n");

    fun(fp);

    fclose(fp);

    return 0;
}

// Design a lexical analyzer for given language and the lexical analyzer should ignore redundant spaces, tabs and new lines.

#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

bool check(char temp[]) {
    char keyword[32][10] = {"auto","break","case","char","const","continue","default",
                            "do","double","else","enum","extern","float","for","goto",
                            "if","int","long","register","return","short","signed",
                            "sizeof","static","struct","switch","typedef","union",
                            "unsigned","void","volatile","while"};

    for(int i=0; i<32; i++) {
        if(strcmp(keyword[i], temp) == 0) 
            return true;
    }
    return false;
}

void fun(FILE *fp) {
    FILE *fp1, *fp2, *fp3;

    fp1 = fopen("operator.txt", "w");
    if(!fp1) {
        printf("\nCould not open operator file");
        exit(1);
    }
    else
        printf("\nOpening operator file\n");

    fp2 = fopen("keyword.txt", "w");
    if(!fp2) {
        printf("\nCould not open keyword file");
        exit(1);
    }
    else
        printf("\nOpening keyword file\n");

    fp3 = fopen("identifier.txt", "w");
    if(!fp3) {
        printf("\nCould not open identifier file");
        exit(1);
    }
    else
        printf("\nOpening identifier file\n");

    char ch, temp[15], operator[] = "+-*/%=";

    int i=0, f=0;
    while((ch = fgetc(fp)) != EOF) {
        for(int j=0; j<6; j++) {
            if(ch == operator[j])
                fprintf(fp1, "%c\n", ch);
        }
        if(f==2) {
            if(ch == '\n')
                f = 0;
            else
                continue;
        }
        if(ch == '/') {
            if(f==0)
                f=1;
            else
                f=2;
        }
        else if(isalnum(ch)) 
            temp[i++] = ch;
        else if((ch == ' ' || ch == '\n') && (i != 0)) {
            temp[i] = '\0';
            i = 0;
            if(check(temp) == 1)
                fprintf(fp2, "%s\n", temp);
            else
                fprintf(fp3, "%s\n", temp);
        }
    } 
}

int main() {
    FILE *fp;
    char fname[50];

    printf("\nEnter the source file path: ");
    scanf("%s", fname);

    fp = fopen(fname,"r");
    if(!fp) {
        printf("\nCould not open read file");
        return 1;
    }
    else
        printf("\nOpening read file\n");

    fun(fp);

    fclose(fp);

    return 0;
}

// Write a C program to simulate lexical analyzer for validating operators.

#include <stdio.h>

int is_rel(char ch) {
    if(ch == '<' || ch == '>' || ch == '!' || ch == '=')
        return 1;
    return 0;
}

int is_bit(char ch) {
    if(ch == '&' || ch == '^' || ch == '~' || ch == '|')
        return 1;
    return 0;
}

int is_ari(char ch) {
    if(ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '%')
        return 1;
    return 0;
}

void fun(char ch[]) {
    if(is_rel(ch[0]) && (ch[1]=='=' || ch[1]=='\0')) {
        printf("\nIt is relational operator");
        return;
    }

    if((is_bit(ch[0]) && ch[1]=='\0') || ((ch[0]=='<' || ch[0]=='>') && ch[0]==ch[1])) {
        printf("\nIt is bitwise operator");
        return;
    }

    if(((ch[0]=='&' || ch[0]=='|') && ch[0]==ch[1]) || (ch[0]=='!' && ch[1]=='\0')) {
        printf("\nIt is logical operator");
        return;
    }

    if(ch[0]=='?' && ch[1]==':') {
        printf("\nIt is ternary operator");
        return;
    }

    if((ch[0]=='+' || ch[0]=='-') && ch[0]==ch[1])
        printf("\nIt is unary operator");
    else if((is_ari(ch[0]) && ch[1]=='=') || (ch[0]=='=' && ch[1]=='\0'))
        printf("\nIt is assignment operator");
    else if(is_ari(ch[0]) && ch[1]=='\0')
        printf("\nIt is arithmetic operator");
}

int main() {
    char ch[2];
    
    printf("Enter the string: ");
    scanf("%s",&ch);

    fun(ch);
    return 0;
}
